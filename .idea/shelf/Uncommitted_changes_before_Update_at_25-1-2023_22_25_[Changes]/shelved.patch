Index: breedsoft/src/test/java/nl/novi/breedsoft/integration/PersonIntegrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.novi.breedsoft.integration;\r\n\r\npublic class PersonIntegrationTest {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/breedsoft/src/test/java/nl/novi/breedsoft/integration/PersonIntegrationTest.java b/breedsoft/src/test/java/nl/novi/breedsoft/integration/PersonIntegrationTest.java
--- a/breedsoft/src/test/java/nl/novi/breedsoft/integration/PersonIntegrationTest.java	(revision 1a29843528efc59db44eac998d209028242a4e9a)
+++ b/breedsoft/src/test/java/nl/novi/breedsoft/integration/PersonIntegrationTest.java	(date 1674678723839)
@@ -1,4 +1,279 @@
 package nl.novi.breedsoft.integration;
 
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
+import nl.novi.breedsoft.cleanupH2DatabaseTestListener.CleanupH2DatabaseTestListener;
+import nl.novi.breedsoft.dto.personDtos.PersonInputDto;
+import nl.novi.breedsoft.model.animal.enumerations.Sex;
+import nl.novi.breedsoft.model.management.DomesticatedDog;
+import nl.novi.breedsoft.model.management.Person;
+import nl.novi.breedsoft.model.management.enumerations.Breed;
+import nl.novi.breedsoft.model.management.enumerations.BreedGroup;
+import nl.novi.breedsoft.model.management.enumerations.Status;
+import nl.novi.breedsoft.repository.DomesticatedDogRepository;
+import nl.novi.breedsoft.repository.PersonRepository;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestExecutionListeners;
+import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.time.LocalDate;
+import java.time.Month;
+import java.util.List;
+
+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+@ActiveProfiles("test")
+@TestExecutionListeners(listeners = {DependencyInjectionTestExecutionListener.class, CleanupH2DatabaseTestListener.class})
 public class PersonIntegrationTest {
+
+    @Autowired
+    MockMvc mockMvc;
+
+    @Autowired
+    PersonRepository personRepository;
+
+    @Autowired
+    DomesticatedDogRepository domesticatedDogRepository;
+
+    Person person = new Person();
+    PersonInputDto personInputDto = new PersonInputDto();
+    DomesticatedDog domesticatedDog = new DomesticatedDog();
+
+    @Test
+    void getAllPersons() throws  Exception {
+        person.setSex(Sex.female);
+        person.setFirstName("Eva");
+        person.setLastName("Hauber");
+        person.setStreet("Maas");
+        person.setHouseNumber(31);
+        person.setZipCode("5172CN");
+        person.setCity("Kaatsheuvel");
+        personRepository.save(person);
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.ownedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/persons").with(jwt()))
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$[0].id").value(person.getId()))
+                .andExpect(jsonPath("$[0].firstName").value("Eva"))
+                .andExpect(jsonPath("$[0].dogs.[0].id").value(domesticatedDog.getId()))
+                .andExpect(jsonPath("$[0].dogs.[0].name").value("Saar"));
+    }
+
+    @Test
+    void getPersonById() throws  Exception {
+
+        person.setSex(Sex.female);
+        person.setFirstName("Eva");
+        person.setLastName("Hauber");
+        person.setStreet("Maas");
+        person.setHouseNumber(31);
+        person.setZipCode("5172CN");
+        person.setCity("Kaatsheuvel");
+        personRepository.save(person);
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.ownedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/persons/id/{id}", person.getId()).with(jwt()))
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.id").value(person.getId()))
+                .andExpect(jsonPath("$.firstName").value("Eva"))
+                .andExpect(jsonPath("$.dogs.[0].id").value(domesticatedDog.getId()))
+                .andExpect(jsonPath("$.dogs.[0].name").value("Saar"));
+    }
+
+    @Test
+    void getPersonWithUnknownId() throws  Exception {
+        mockMvc.perform(get("/persons/id/{id}", "222").with(jwt()))
+                .andExpect(status().isNotFound())
+                .andExpect(content().string("Person not found in database"));
+    }
+
+    @Test
+    void getPersonByName() throws  Exception {
+
+        person.setSex(Sex.female);
+        person.setFirstName("Eva");
+        person.setLastName("Hauber");
+        person.setStreet("Maas");
+        person.setHouseNumber(31);
+        person.setZipCode("5172CN");
+        person.setCity("Kaatsheuvel");
+        personRepository.save(person);
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.ownedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/persons/name/{name}", "Hauber").with(jwt()))
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$[0].id").value(person.getId()))
+                .andExpect(jsonPath("$[0].firstName").value("Eva"))
+                .andExpect(jsonPath("$[0].dogs.[0].id").value(domesticatedDog.getId()))
+                .andExpect(jsonPath("$[0].dogs.[0].name").value("Saar"));
+    }
+
+    @Test
+    void getPersonWithUnknownName() throws  Exception {
+        mockMvc.perform(get("/persons/name/{name}", "Dikbips").with(jwt()))
+                .andExpect(status().isNotFound())
+                .andExpect(content().string("No person with this lastname found in database"));
+    }
+
+    @Test
+    void getDogBreeders() throws Exception{
+        person.setSex(Sex.female);
+        person.setFirstName("Eva");
+        person.setLastName("Hauber");
+        person.setStreet("Maas");
+        person.setHouseNumber(31);
+        person.setZipCode("5172CN");
+        person.setCity("Kaatsheuvel");
+        personRepository.save(person);
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/persons/dogbreeders").with(jwt()))
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$[0].id").value(person.getId()))
+                .andExpect(jsonPath("$[0].firstName").value("Eva"))
+                .andExpect(jsonPath("$[0].lastName").value("Hauber"))
+                .andExpect(jsonPath("$[0].sex").value("female"))
+                .andExpect(jsonPath("$[0].street").value("Maas"))
+                .andExpect(jsonPath("$[0].houseNumber").value("31"))
+                .andExpect(jsonPath("$[0].city").value("Kaatsheuvel"));
+    }
+
+    @Test
+    void getDogBreedersWhenNoBreedDogsExist() throws Exception{
+        mockMvc.perform(get("/persons/dogbreeders").with(jwt()))
+                .andExpect(status().isNotFound())
+                .andExpect(content().string("There are no dog breeders found"));
+    }
+
+    @Test
+    void createPerson() throws Exception{
+
+        personInputDto = new PersonInputDto();
+        personInputDto.setSex("female");
+        personInputDto.setFirstName("Eva");
+        personInputDto.setLastName("Hauber");
+        personInputDto.setStreet("Maas");
+        personInputDto.setHouseNumber(31);
+        personInputDto.setZipCode("5172CN");
+        personInputDto.setCity("Kaatsheuvel");
+        personInputDto.setCountry("Nederland");
+        personInputDto.setDateOfBirth(LocalDate.of(1986, Month.JANUARY, 2));
+
+        mockMvc.perform(post("/persons").with(jwt())
+                .contentType(MediaType.APPLICATION_JSON)
+                .content(asJsonString(personInputDto)))
+                .andExpect(status().isCreated())
+                .andExpect(content().string("Person is successfully created!"));
+    }
+
+    @Test
+    void createPersonWithInvalidZipCode() throws Exception{
+
+        personInputDto = new PersonInputDto();
+        personInputDto.setSex("female");
+        personInputDto.setFirstName("Eva");
+        personInputDto.setLastName("Hauber");
+        personInputDto.setStreet("Maas");
+        personInputDto.setHouseNumber(31);
+        personInputDto.setZipCode("517CN");
+        personInputDto.setCity("Kaatsheuvel");
+        personInputDto.setCountry("Nederland");
+        personInputDto.setDateOfBirth(LocalDate.of(1986, Month.JANUARY, 2));
+
+        mockMvc.perform(post("/persons").with(jwt())
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(asJsonString(personInputDto)))
+                .andExpect(status().isBadRequest())
+                .andExpect(content().string(org.hamcrest.Matchers.containsString("zipCode: Format zipcode as: 1111AA")));
+    }
+
+    @Test
+    void createPersonWithMissingValues() throws Exception{
+
+        personInputDto = new PersonInputDto();
+        personInputDto.setSex("female");
+        personInputDto.setFirstName("Eva");
+        personInputDto.setLastName("Hauber");
+        personInputDto.setStreet("Maas");
+        personInputDto.setHouseNumber(31);
+        personInputDto.setZipCode("5172CN");
+        personInputDto.setCity("Kaatsheuvel");
+
+        mockMvc.perform(post("/persons").with(jwt())
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(asJsonString(personInputDto)))
+                .andExpect(status().isBadRequest());
+
+    }
+
+    //TEST HELPER CLASSES
+    public static String asJsonString(final PersonInputDto obj) {
+        try {
+            ObjectMapper mapper = new ObjectMapper();
+            mapper.registerModule(new JavaTimeModule());
+            mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+            return mapper.writeValueAsString(obj);
+        } catch (JsonProcessingException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static String arrayAsJsonString(final List<PersonInputDto> obj) {
+        try {
+            ObjectMapper mapper = new ObjectMapper();
+            mapper.registerModule(new JavaTimeModule());
+            mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+            return mapper.writeValueAsString(obj);
+        } catch (JsonProcessingException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
Index: breedsoft/src/test/java/nl/novi/breedsoft/integration/DomesticatedDogIntegrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package nl.novi.breedsoft.integration;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.SerializationFeature;\r\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\r\nimport nl.novi.breedsoft.dto.domesticatedDogDtos.DomesticatedDogInputDto;\r\nimport nl.novi.breedsoft.dto.domesticatedDogDtos.DomesticatedDogOutputDto;\r\nimport nl.novi.breedsoft.model.animal.enumerations.Sex;\r\nimport nl.novi.breedsoft.model.management.DomesticatedDog;\r\nimport nl.novi.breedsoft.model.management.MedicalData;\r\nimport nl.novi.breedsoft.model.management.Person;\r\nimport nl.novi.breedsoft.model.management.VeterinarianAppointment;\r\nimport nl.novi.breedsoft.model.management.enumerations.Breed;\r\nimport nl.novi.breedsoft.model.management.enumerations.BreedGroup;\r\nimport nl.novi.breedsoft.model.management.enumerations.Status;\r\nimport nl.novi.breedsoft.repository.DomesticatedDogRepository;\r\nimport nl.novi.breedsoft.repository.MedicalDataRepository;\r\nimport nl.novi.breedsoft.repository.PersonRepository;\r\nimport nl.novi.breedsoft.repository.VeterinarianAppointmentRepository;\r\n\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.mock.web.MockMultipartFile;\r\nimport org.springframework.test.context.ActiveProfiles;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\r\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.Month;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\r\n\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\n@ActiveProfiles(\"test\")\r\npublic class DomesticatedDogIntegrationTest {\r\n\r\n    @Autowired\r\n    MockMvc mockMvc;\r\n\r\n    @Autowired\r\n    DomesticatedDogRepository domesticatedDogRepository;\r\n\r\n    @Autowired\r\n    PersonRepository personRepository;\r\n\r\n    @Autowired\r\n    MedicalDataRepository medicalDataRepository;\r\n\r\n    @Autowired\r\n    VeterinarianAppointmentRepository veterinarianAppointmentRepository;\r\n\r\n    DomesticatedDog domesticatedDog1;\r\n    DomesticatedDog domesticatedDog2;\r\n    DomesticatedDog domesticatedDog3;\r\n    DomesticatedDog domesticatedDog4;\r\n\r\n    List<DomesticatedDogInputDto> domesticatedDogInputDtoList;\r\n\r\n    DomesticatedDogOutputDto dogOutputDto1;\r\n\r\n    DomesticatedDogInputDto dogInputDto;\r\n    DomesticatedDogInputDto dogInputDtoUnknownPerson;\r\n    DomesticatedDogInputDto dogInputDtoUnknownSex;\r\n    DomesticatedDogInputDto dogInputDtoMissingValues;\r\n    DomesticatedDogInputDto dogInputDtoLostWeight;\r\n\r\n    Person person;\r\n    Person person2;\r\n    Person personNotInRepo;\r\n\r\n    VeterinarianAppointment veterinarianAppointment;\r\n    List<VeterinarianAppointment> veterinarianAppointmentList;\r\n    MedicalData medicalData;\r\n    List<MedicalData> medicalDataList;\r\n\r\n    @BeforeEach\r\n    void setup() {\r\n\r\n\r\n        personNotInRepo = new Person();\r\n        domesticatedDog1 = new DomesticatedDog();\r\n        domesticatedDog2 = new DomesticatedDog();\r\n        domesticatedDog3 = new DomesticatedDog();\r\n        domesticatedDog4 = new DomesticatedDog();\r\n        person = new Person();\r\n        person2 = new Person();\r\n        dogOutputDto1 = new DomesticatedDogOutputDto();\r\n        dogInputDto = new DomesticatedDogInputDto();\r\n        domesticatedDogInputDtoList = new ArrayList<>();\r\n        dogInputDtoLostWeight = new DomesticatedDogInputDto();\r\n        dogInputDtoUnknownPerson = new DomesticatedDogInputDto();\r\n        dogInputDtoUnknownSex = new DomesticatedDogInputDto();\r\n        dogInputDtoMissingValues = new DomesticatedDogInputDto();\r\n        medicalData = new MedicalData();\r\n        medicalDataList = new ArrayList<>();\r\n        veterinarianAppointment = new VeterinarianAppointment();\r\n        veterinarianAppointmentList = new ArrayList<>();\r\n\r\n        person = new Person();\r\n        person.setId(1L);\r\n        person.setSex(Sex.female);\r\n        person.setFirstName(\"Eva\");\r\n        person.setLastName(\"Hauber\");\r\n        person.setStreet(\"Maas\");\r\n        person.setHouseNumber(31);\r\n        person.setZipCode(\"5172CN\");\r\n        person.setCity(\"Kaatsheuvel\");\r\n        person.setDogs(new ArrayList<>(List.of(domesticatedDog1, domesticatedDog2, domesticatedDog3)));\r\n        personRepository.save(person);\r\n\r\n        domesticatedDog1.setId(1L);\r\n        domesticatedDog1.setName(\"Saar\");\r\n        domesticatedDog1.setBreed(Breed.Dachschund);\r\n        domesticatedDog1.setFood(\"dog chow\");\r\n        domesticatedDog1.setDogStatus(Status.breedDog);\r\n        domesticatedDog1.setSex(Sex.female);\r\n        domesticatedDog1.setBreedGroup(BreedGroup.Hound);\r\n        domesticatedDog1.setKindOfHair(\"Long haired\");\r\n        domesticatedDog1.setWeightInGrams(1000.00);\r\n        domesticatedDogRepository.save(domesticatedDog1);\r\n\r\n        domesticatedDog2.setId(2L);\r\n        domesticatedDog2.setName(\"Pip\");\r\n        domesticatedDog2.setBreed(Breed.Dachschund);\r\n        domesticatedDog2.setFood(\"dog chow\");\r\n        domesticatedDog2.setDogStatus(Status.ownedDog);\r\n        domesticatedDog2.setSex(Sex.female);\r\n        domesticatedDog2.setBreedGroup(BreedGroup.Hound);\r\n        domesticatedDog2.setKindOfHair(\"Long haired\");\r\n        domesticatedDogRepository.save(domesticatedDog2);\r\n\r\n        domesticatedDog3.setId(3L);\r\n        domesticatedDog3.setName(\"Lotje\");\r\n        domesticatedDog3.setBreed(Breed.Affenpinscher);\r\n        domesticatedDog3.setFood(\"dog chow\");\r\n        domesticatedDog3.setDogStatus(Status.availablePreOwned);\r\n        domesticatedDog3.setSex(Sex.female);\r\n        domesticatedDog3.setBreedGroup(BreedGroup.Hound);\r\n        domesticatedDog3.setKindOfHair(\"Short haired\");\r\n        domesticatedDog3.setParentId(1L);\r\n        domesticatedDogRepository.save(domesticatedDog3);\r\n\r\n\r\n    }\r\n\r\n    @AfterEach\r\n    void tear(){\r\n\r\n        if(domesticatedDogRepository.count() > 0){\r\n            domesticatedDogRepository = null;\r\n        }\r\n\r\n        if(personRepository.count() > 0){\r\n            personRepository = null;\r\n        }\r\n\r\n    }\r\n\r\n    @Test\r\n    void getAllDomesticatedDogs() throws Exception {\r\n\r\n        mockMvc.perform(get(\"/dogs\").with(jwt()))\r\n                .andExpect(status().isOk())\r\n                .andExpect(jsonPath(\"$[0].id\").value(1))\r\n                .andExpect(jsonPath(\"$[0].name\").value(\"Saar\"))\r\n                .andExpect(jsonPath(\"$[0].sex\").value(\"female\"))\r\n                .andExpect(jsonPath(\"$[1].id\").value(2))\r\n                .andExpect(jsonPath(\"$[1].breedGroup\").value(\"Hound\"))\r\n                .andExpect(jsonPath(\"$[1].kindOfHair\").value(\"Long haired\"))\r\n                .andExpect(jsonPath(\"$[2].id\").value(3))\r\n                .andExpect(jsonPath(\"$[2].name\").value(\"Lotje\"));\r\n    }\r\n\r\n    @Test\r\n    void getDomesticatedDogById() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/id/{id}\", \"1\").with(jwt()))\r\n                .andExpect(status().isOk())\r\n                .andExpect(jsonPath(\"$.id\").value(1))\r\n                .andExpect(jsonPath(\"$.name\").value(\"Saar\"))\r\n                .andExpect(jsonPath(\"$.sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void getDomesticatedDogByIdWithUnknownId() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/id/{id}\", \"1000\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"Dog not found in database.\"));\r\n    }\r\n\r\n    @Test\r\n    void getDomesticatedDogByName() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/name/{name}\", \"Lotje\").with(jwt()))\r\n                .andExpect(jsonPath(\"$[0].id\").value(3))\r\n                .andExpect(jsonPath(\"$[0].name\").value(\"Lotje\"))\r\n                .andExpect(jsonPath(\"$[0].sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void getDomesticatedDogByNameWithUnknownName() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/name/{name}\", \"xxx\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"No dog with this name found in database.\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void getChildrenById() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/{id}/children\", \"1\").with(jwt()))\r\n                .andExpect(jsonPath(\"$[0].id\").value(3))\r\n                .andExpect(jsonPath(\"$[0].name\").value(\"Lotje\"))\r\n                .andExpect(jsonPath(\"$[0].sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void getChildrenByIdWithoutChildren() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/{id}/children\", \"2\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"This dog doesn't have children.\"));\r\n    }\r\n\r\n    @Test\r\n    void getChildrenByIdWithUnknownParent() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/{id}/children\", \"1000\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"No dog with this id found in database.\"));\r\n    }\r\n\r\n    @Test\r\n    void getParentById() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/{id}/parent\", \"3\").with(jwt()))\r\n                .andExpect(jsonPath(\"$.id\").value(1))\r\n                .andExpect(jsonPath(\"$.name\").value(\"Saar\"))\r\n                .andExpect(jsonPath(\"$.sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void getParentByIdWithoutParent() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/{id}/parent\", \"1\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"No information about parent found.\"));\r\n    }\r\n\r\n    @Test\r\n    void getAvailableDogs() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/available\").with(jwt()))\r\n                .andExpect(jsonPath(\"$[0].id\").value(3))\r\n                .andExpect(jsonPath(\"$[0].name\").value(\"Lotje\"))\r\n                .andExpect(jsonPath(\"$[0].sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void getBreedDogs() throws Exception {\r\n        mockMvc.perform(get(\"/dogs/breeddog\").with(jwt()))\r\n                .andExpect(jsonPath(\"$[0].id\").value(1))\r\n                .andExpect(jsonPath(\"$[0].name\").value(\"Saar\"))\r\n                .andExpect(jsonPath(\"$[0].sex\").value(\"female\"));\r\n    }\r\n\r\n    @Test\r\n    void createDog() throws Exception {\r\n        dogInputDto.setName(\"Saar\");\r\n        dogInputDto.setBreed(\"Dachschund\");\r\n        dogInputDto.setFood(\"dog chow\");\r\n        dogInputDto.setDogStatus(\"breedDog\");\r\n        dogInputDto.setSex(\"female\");\r\n        dogInputDto.setBreedGroup(\"Hound\");\r\n        dogInputDto.setKindOfHair(\"Long haired\");\r\n        dogInputDto.setChipNumber(\"111111111111111\");\r\n        dogInputDto.setHairColor(\"Brown\");\r\n        dogInputDto.setPerson(person);\r\n        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDto.setParentId(2L);\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isCreated());\r\n    }\r\n\r\n    @Test\r\n    void createDogWithoutDogObject() throws Exception {\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isBadRequest());\r\n    }\r\n\r\n\r\n    @Test\r\n    void createDogMissingHairColor() throws Exception {\r\n        dogInputDtoMissingValues.setName(\"Saar\");\r\n        dogInputDtoMissingValues.setBreed(\"Dachschund\");\r\n        dogInputDtoMissingValues.setFood(\"dog chow\");\r\n        dogInputDtoMissingValues.setDogStatus(\"breedDog\");\r\n        dogInputDtoMissingValues.setSex(\"female\");\r\n        dogInputDtoMissingValues.setBreedGroup(\"Hound\");\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(asJsonString(dogInputDtoMissingValues)))\r\n                .andExpect(status().isBadRequest())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"hairColor: Please enter the hair color of the dog.\")));\r\n    }\r\n\r\n    @Test\r\n    void createDogUnknownParent() throws Exception {\r\n        dogInputDto.setName(\"Saar\");\r\n        dogInputDto.setBreed(\"Dachschund\");\r\n        dogInputDto.setFood(\"dog chow\");\r\n        dogInputDto.setDogStatus(\"breedDog\");\r\n        dogInputDto.setSex(\"female\");\r\n        dogInputDto.setBreedGroup(\"Hound\");\r\n        dogInputDto.setKindOfHair(\"Long haired\");\r\n        dogInputDto.setChipNumber(\"111111111111111\");\r\n        dogInputDto.setHairColor(\"Brown\");\r\n        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDto.setParentId(222L);\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"Parent ID not found.\")));\r\n    }\r\n\r\n    @Test\r\n    void createDogMissingDOB() throws Exception {\r\n        dogInputDtoMissingValues.setName(\"Saar\");\r\n        dogInputDtoMissingValues.setBreed(\"Dachschund\");\r\n        dogInputDtoMissingValues.setFood(\"dog chow\");\r\n        dogInputDtoMissingValues.setDogStatus(\"breedDog\");\r\n        dogInputDtoMissingValues.setSex(\"female\");\r\n        dogInputDtoMissingValues.setBreedGroup(\"Hound\");\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoMissingValues)))\r\n                .andExpect(status().isBadRequest())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"dateOfBirth: must not be null\")));\r\n    }\r\n\r\n    @Test\r\n    void createDogMissingHairKind() throws Exception {\r\n        dogInputDtoMissingValues.setName(\"Saar\");\r\n        dogInputDtoMissingValues.setBreed(\"Dachschund\");\r\n        dogInputDtoMissingValues.setFood(\"dog chow\");\r\n        dogInputDtoMissingValues.setDogStatus(\"breedDog\");\r\n        dogInputDtoMissingValues.setSex(\"female\");\r\n        dogInputDtoMissingValues.setBreedGroup(\"Hound\");\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoMissingValues)))\r\n                .andExpect(status().isBadRequest())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"kindOfHair: Please enter kind of hair.\")));\r\n    }\r\n\r\n    @Test\r\n    void createDogMissingChipNumber() throws Exception {\r\n        dogInputDtoMissingValues.setName(\"Saar\");\r\n        dogInputDtoMissingValues.setBreed(\"Dachschund\");\r\n        dogInputDtoMissingValues.setFood(\"dog chow\");\r\n        dogInputDtoMissingValues.setDogStatus(\"breedDog\");\r\n        dogInputDtoMissingValues.setSex(\"female\");\r\n        dogInputDtoMissingValues.setBreedGroup(\"Hound\");\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoMissingValues)))\r\n                .andExpect(status().isBadRequest())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"chipNumber: Please enter a chip number.\")));\r\n    }\r\n\r\n    @Test\r\n    void createDogInvalidPersonId() throws Exception {\r\n        personNotInRepo.setId(5L);\r\n        dogInputDtoUnknownPerson.setName(\"Saar\");\r\n        dogInputDtoUnknownPerson.setBreed(\"Dachschund\");\r\n        dogInputDtoUnknownPerson.setFood(\"dog chow\");\r\n        dogInputDtoUnknownPerson.setDogStatus(\"breedDog\");\r\n        dogInputDtoUnknownPerson.setSex(\"female\");\r\n        dogInputDtoUnknownPerson.setBreedGroup(\"Hound\");\r\n        dogInputDtoUnknownPerson.setKindOfHair(\"Long haired\");\r\n        dogInputDtoUnknownPerson.setChipNumber(\"111111111111111\");\r\n        dogInputDtoUnknownPerson.setHairColor(\"Brown\");\r\n        dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDtoUnknownPerson.setPerson(personNotInRepo);\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoUnknownPerson)))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"Provided dog owner does not exist.\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void createDogMissingPersonId() throws Exception {\r\n        dogInputDtoUnknownPerson.setName(\"Saar\");\r\n        dogInputDtoUnknownPerson.setBreed(\"Dachschund\");\r\n        dogInputDtoUnknownPerson.setFood(\"dog chow\");\r\n        dogInputDtoUnknownPerson.setDogStatus(\"breedDog\");\r\n        dogInputDtoUnknownPerson.setSex(\"female\");\r\n        dogInputDtoUnknownPerson.setBreedGroup(\"Hound\");\r\n        dogInputDtoUnknownPerson.setKindOfHair(\"Long haired\");\r\n        dogInputDtoUnknownPerson.setChipNumber(\"111111111111111\");\r\n        dogInputDtoUnknownPerson.setHairColor(\"Brown\");\r\n        dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDtoUnknownPerson.setPerson(personNotInRepo);\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoUnknownPerson)))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"Missing Person ID\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void createDogInvalidSex() throws Exception {\r\n        dogInputDtoUnknownSex.setName(\"Saar\");\r\n        dogInputDtoUnknownSex.setBreed(\"Dachschund\");\r\n        dogInputDtoUnknownSex.setFood(\"dog chow\");\r\n        dogInputDtoUnknownSex.setDogStatus(\"breedDog\");\r\n        dogInputDtoUnknownSex.setSex(\"xxx\");\r\n        dogInputDtoUnknownSex.setBreedGroup(\"Hound\");\r\n        dogInputDtoUnknownSex.setKindOfHair(\"Long haired\");\r\n        dogInputDtoUnknownSex.setChipNumber(\"111111111111111\");\r\n        dogInputDtoUnknownSex.setHairColor(\"Brown\");\r\n        dogInputDtoUnknownSex.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n\r\n        mockMvc.perform(post(\"/dogs\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoUnknownSex)))\r\n                .andExpect(status().isBadRequest())\r\n                .andExpect(content().string(org.hamcrest.Matchers.containsString(\"sex: Invalid sex.\")));\r\n    }\r\n\r\n    @Test\r\n    void createLitter() throws Exception {\r\n        dogInputDto.setName(\"Lotje\");\r\n        dogInputDto.setBreed(\"Dachschund\");\r\n        dogInputDto.setFood(\"dog chow\");\r\n        dogInputDto.setDogStatus(\"breedDog\");\r\n        dogInputDto.setPerson(person);\r\n        dogInputDto.setSex(\"female\");\r\n        dogInputDto.setBreedGroup(\"Hound\");\r\n        dogInputDto.setKindOfHair(\"Long haired\");\r\n        dogInputDto.setChipNumber(\"333333333333333\");\r\n        dogInputDto.setHairColor(\"Brown\");\r\n        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n\r\n        domesticatedDogInputDtoList = new ArrayList<>();\r\n        domesticatedDogInputDtoList.add(dogInputDto);\r\n\r\n        mockMvc.perform(post(\"/dogs/{id}/children\", 1).with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(arrayAsJsonString(domesticatedDogInputDtoList)))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void createLitterWithNonListInput() throws Exception {\r\n        mockMvc.perform(post(\"/dogs/{id}/children\", 1).with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isBadRequest());\r\n    }\r\n\r\n    @Test\r\n    void createLitterWithEmptyListInput() throws Exception {\r\n        List<DomesticatedDogInputDto> dogs = new ArrayList<>();\r\n\r\n        mockMvc.perform(post(\"/dogs/{id}/children\", 1).with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(arrayAsJsonString(dogs)))\r\n                .andExpect(content().string(\"Empty array. No dogs are created\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void uploadImageWithoutImage() throws Exception {\r\n        byte[] imageBytes = {1, 2, 3};\r\n        MockMultipartFile image = new MockMultipartFile(\"file\", \"filename.txt\", \"text/plain\", imageBytes);\r\n\r\n        mockMvc.perform(MockMvcRequestBuilders.multipart(\"/dogs/{id}/image\", 1)\r\n                .file(image).with(jwt()))\r\n                .andExpect(status().isBadRequest());\r\n   }\r\n\r\n    @Test\r\n    void updateDog() throws Exception {\r\n        dogInputDto.setName(\"Saar\");\r\n        dogInputDto.setBreed(\"Dachschund\");\r\n        dogInputDto.setFood(\"dog chow\");\r\n        dogInputDto.setDogStatus(\"breedDog\");\r\n        dogInputDto.setPerson(person);\r\n        dogInputDto.setSex(\"female\");\r\n        dogInputDto.setBreedGroup(\"Hound\");\r\n        dogInputDto.setKindOfHair(\"Long haired\");\r\n        dogInputDto.setChipNumber(\"111111111111111\");\r\n        dogInputDto.setHairColor(\"Brown\");\r\n        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n\r\n        mockMvc.perform(put(\"/dogs/{id}\", \"3\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void updateDogWithUnknownId() throws Exception {\r\n        dogInputDto.setName(\"Saar\");\r\n        dogInputDto.setBreed(\"Dachschund\");\r\n        dogInputDto.setFood(\"dog chow\");\r\n        dogInputDto.setDogStatus(\"breedDog\");\r\n        dogInputDto.setPerson(person);\r\n        dogInputDto.setSex(\"female\");\r\n        dogInputDto.setBreedGroup(\"Hound\");\r\n        dogInputDto.setKindOfHair(\"Long haired\");\r\n        dogInputDto.setChipNumber(\"111111111111111\");\r\n        dogInputDto.setHairColor(\"Brown\");\r\n        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n\r\n        mockMvc.perform(put(\"/dogs/{id}\", \"555\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void updateDogWithUnknownPerson() throws Exception {\r\n        personNotInRepo.setId(5L);\r\n\r\n        dogInputDtoUnknownPerson.setName(\"Saar\");\r\n        dogInputDtoUnknownPerson.setBreed(\"Dachschund\");\r\n        dogInputDtoUnknownPerson.setFood(\"dog chow\");\r\n        dogInputDtoUnknownPerson.setDogStatus(\"breedDog\");\r\n        dogInputDtoUnknownPerson.setSex(\"female\");\r\n        dogInputDtoUnknownPerson.setBreedGroup(\"Hound\");\r\n        dogInputDtoUnknownPerson.setKindOfHair(\"Long haired\");\r\n        dogInputDtoUnknownPerson.setChipNumber(\"111111111111111\");\r\n        dogInputDtoUnknownPerson.setHairColor(\"Brown\");\r\n        dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDtoUnknownPerson.setPerson(personNotInRepo);\r\n\r\n        mockMvc.perform(put(\"/dogs/{id}\", \"3\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoUnknownPerson)))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"Provided dog owner does not exist\"));\r\n    }\r\n\r\n    @Test\r\n    void patchDog() throws Exception {\r\n        mockMvc.perform(patch(\"/dogs/{id}\", \"3\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void patchDogWithUnknownId() throws Exception {\r\n        mockMvc.perform(patch(\"/dogs/{id}\", \"666\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDto)))\r\n                .andExpect(content().string(\"Dog is not found.\"));\r\n    }\r\n\r\n    @Test\r\n    void patchDogWithLostWeight() throws Exception {\r\n\r\n        dogInputDtoLostWeight.setWeightInGrams(10.00);\r\n\r\n        mockMvc.perform(patch(\"/dogs/{id}\", \"1\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoLostWeight)))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().string(\"Your dog has been updated. WARNING: Your dog has lost weight!\"));\r\n    }\r\n\r\n    @Test\r\n    void patchDogWithUnknownPerson() throws Exception {\r\n\r\n        personNotInRepo.setId(5L);\r\n\r\n        dogInputDtoUnknownPerson.setName(\"Saar\");\r\n        dogInputDtoUnknownPerson.setBreed(\"Dachschund\");\r\n        dogInputDtoUnknownPerson.setFood(\"dog chow\");\r\n        dogInputDtoUnknownPerson.setDogStatus(\"breedDog\");\r\n        dogInputDtoUnknownPerson.setSex(\"female\");\r\n        dogInputDtoUnknownPerson.setBreedGroup(\"Hound\");\r\n        dogInputDtoUnknownPerson.setKindOfHair(\"Long haired\");\r\n        dogInputDtoUnknownPerson.setChipNumber(\"111111111111111\");\r\n        dogInputDtoUnknownPerson.setHairColor(\"Brown\");\r\n        dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));\r\n        dogInputDtoUnknownPerson.setPerson(personNotInRepo);\r\n\r\n        mockMvc.perform(patch(\"/dogs/{id}\", \"1\").with(jwt())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(asJsonString(dogInputDtoUnknownPerson)))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"Provided dog owner does not exist\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void deleteDogImageWithoutImage() throws Exception {\r\n        mockMvc.perform(delete(\"/dogs/{id}/image\", \"1\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"This dog does not have a picture.\"));\r\n    }\r\n\r\n    @Test\r\n    void deleteDogImageUnknownId() throws Exception {\r\n        mockMvc.perform(delete(\"/dogs/{id}/image\", \"111\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"No dog with given ID found.\"));\r\n    }\r\n\r\n    @Test\r\n    void deleteDogUnknownId() throws Exception {\r\n        mockMvc.perform(delete(\"/dogs/{id}\", \"111\").with(jwt()))\r\n                .andExpect(status().isNotFound())\r\n                .andExpect(content().string(\"No dog with given ID found.\"));\r\n    }\r\n\r\n    @Test\r\n    void deleteDog() throws Exception {\r\n        DomesticatedDog domesticatedDogToDelete = new DomesticatedDog();\r\n        domesticatedDogToDelete.setId(4L);\r\n        domesticatedDogToDelete.setName(\"Pupje\");\r\n        domesticatedDogToDelete.setBreed(Breed.Affenpinscher);\r\n        domesticatedDogToDelete.setFood(\"milk\");\r\n        domesticatedDogToDelete.setDogStatus(Status.soldPup);\r\n        domesticatedDogToDelete.setSex(Sex.female);\r\n        domesticatedDogToDelete.setBreedGroup(BreedGroup.Hound);\r\n        domesticatedDogToDelete.setKindOfHair(\"Short haired\");\r\n        domesticatedDogRepository.save(domesticatedDogToDelete);\r\n\r\n        medicalData = new MedicalData();\r\n        medicalData.setId(1L);\r\n        medicalData.setDiagnose(\"Sick\");\r\n        medicalData.setDateOfMedicalTreatment(LocalDate.of(2023, Month.JANUARY, 22));\r\n        medicalData.setDomesticatedDog(domesticatedDogToDelete);\r\n        medicalDataRepository.save(medicalData);\r\n\r\n        veterinarianAppointment = new VeterinarianAppointment();\r\n        veterinarianAppointment.setId(1L);\r\n        veterinarianAppointment.setSubject(\"Check up\");\r\n        veterinarianAppointment.setAppointmentDate(LocalDate.of(2023, Month.JANUARY, 22));\r\n        veterinarianAppointment.setDomesticatedDog(domesticatedDogToDelete);\r\n        veterinarianAppointmentRepository.save(veterinarianAppointment);\r\n\r\n        mockMvc.perform(delete(\"/dogs/{id}\", domesticatedDogToDelete.getId()).with(jwt()))\r\n                .andExpect(status().isNoContent());\r\n    }\r\n\r\n    //TEST HELPER CLASSES\r\n    public static String asJsonString(final DomesticatedDogInputDto obj) {\r\n        try {\r\n            ObjectMapper mapper = new ObjectMapper();\r\n            mapper.registerModule(new JavaTimeModule());\r\n            mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n            return mapper.writeValueAsString(obj);\r\n        } catch (JsonProcessingException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public static String arrayAsJsonString(final List<DomesticatedDogInputDto> obj) {\r\n        try {\r\n            ObjectMapper mapper = new ObjectMapper();\r\n            mapper.registerModule(new JavaTimeModule());\r\n            mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n            return mapper.writeValueAsString(obj);\r\n        } catch (JsonProcessingException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/breedsoft/src/test/java/nl/novi/breedsoft/integration/DomesticatedDogIntegrationTest.java b/breedsoft/src/test/java/nl/novi/breedsoft/integration/DomesticatedDogIntegrationTest.java
--- a/breedsoft/src/test/java/nl/novi/breedsoft/integration/DomesticatedDogIntegrationTest.java	(revision 1a29843528efc59db44eac998d209028242a4e9a)
+++ b/breedsoft/src/test/java/nl/novi/breedsoft/integration/DomesticatedDogIntegrationTest.java	(date 1674681875837)
@@ -4,8 +4,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
+import nl.novi.breedsoft.cleanupH2DatabaseTestListener.CleanupH2DatabaseTestListener;
 import nl.novi.breedsoft.dto.domesticatedDogDtos.DomesticatedDogInputDto;
-import nl.novi.breedsoft.dto.domesticatedDogDtos.DomesticatedDogOutputDto;
 import nl.novi.breedsoft.model.animal.enumerations.Sex;
 import nl.novi.breedsoft.model.management.DomesticatedDog;
 import nl.novi.breedsoft.model.management.MedicalData;
@@ -18,8 +18,6 @@
 import nl.novi.breedsoft.repository.MedicalDataRepository;
 import nl.novi.breedsoft.repository.PersonRepository;
 import nl.novi.breedsoft.repository.VeterinarianAppointmentRepository;
-
-import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -28,15 +26,14 @@
 import org.springframework.http.MediaType;
 import org.springframework.mock.web.MockMultipartFile;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestExecutionListeners;
+import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
-
 import java.time.LocalDate;
 import java.time.Month;
 import java.util.ArrayList;
 import java.util.List;
-
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
@@ -44,6 +41,7 @@
 @SpringBootTest
 @AutoConfigureMockMvc
 @ActiveProfiles("test")
+@TestExecutionListeners(listeners = {DependencyInjectionTestExecutionListener.class, CleanupH2DatabaseTestListener.class})
 public class DomesticatedDogIntegrationTest {
 
     @Autowired
@@ -61,55 +59,26 @@
     @Autowired
     VeterinarianAppointmentRepository veterinarianAppointmentRepository;
 
-    DomesticatedDog domesticatedDog1;
-    DomesticatedDog domesticatedDog2;
-    DomesticatedDog domesticatedDog3;
-    DomesticatedDog domesticatedDog4;
-
-    List<DomesticatedDogInputDto> domesticatedDogInputDtoList;
+    DomesticatedDog domesticatedDog = new DomesticatedDog();
+    DomesticatedDog domesticatedDogPup = new DomesticatedDog();
+    DomesticatedDog domesticatedDogPreOwned = new DomesticatedDog();
 
-    DomesticatedDogOutputDto dogOutputDto1;
+    List<DomesticatedDogInputDto> domesticatedDogInputDtoList = new ArrayList<>();
 
-    DomesticatedDogInputDto dogInputDto;
-    DomesticatedDogInputDto dogInputDtoUnknownPerson;
-    DomesticatedDogInputDto dogInputDtoUnknownSex;
-    DomesticatedDogInputDto dogInputDtoMissingValues;
-    DomesticatedDogInputDto dogInputDtoLostWeight;
+    DomesticatedDogInputDto dogInputDto = new DomesticatedDogInputDto();
+    DomesticatedDogInputDto dogInputDtoUnknownPerson = new DomesticatedDogInputDto();
+    DomesticatedDogInputDto dogInputDtoUnknownSex = new DomesticatedDogInputDto();
+    DomesticatedDogInputDto dogInputDtoMissingValues = new DomesticatedDogInputDto();
+    DomesticatedDogInputDto dogInputDtoLostWeight = new DomesticatedDogInputDto();
 
-    Person person;
-    Person person2;
-    Person personNotInRepo;
-
-    VeterinarianAppointment veterinarianAppointment;
-    List<VeterinarianAppointment> veterinarianAppointmentList;
-    MedicalData medicalData;
-    List<MedicalData> medicalDataList;
+    Person person = new Person();
+    Person personNotInRepo = new Person();
+    VeterinarianAppointment veterinarianAppointment = new VeterinarianAppointment();
+    MedicalData medicalData = new MedicalData();
 
     @BeforeEach
-    void setup() {
+    void setup(){
 
-
-        personNotInRepo = new Person();
-        domesticatedDog1 = new DomesticatedDog();
-        domesticatedDog2 = new DomesticatedDog();
-        domesticatedDog3 = new DomesticatedDog();
-        domesticatedDog4 = new DomesticatedDog();
-        person = new Person();
-        person2 = new Person();
-        dogOutputDto1 = new DomesticatedDogOutputDto();
-        dogInputDto = new DomesticatedDogInputDto();
-        domesticatedDogInputDtoList = new ArrayList<>();
-        dogInputDtoLostWeight = new DomesticatedDogInputDto();
-        dogInputDtoUnknownPerson = new DomesticatedDogInputDto();
-        dogInputDtoUnknownSex = new DomesticatedDogInputDto();
-        dogInputDtoMissingValues = new DomesticatedDogInputDto();
-        medicalData = new MedicalData();
-        medicalDataList = new ArrayList<>();
-        veterinarianAppointment = new VeterinarianAppointment();
-        veterinarianAppointmentList = new ArrayList<>();
-
-        person = new Person();
-        person.setId(1L);
         person.setSex(Sex.female);
         person.setFirstName("Eva");
         person.setLastName("Hauber");
@@ -117,77 +86,45 @@
         person.setHouseNumber(31);
         person.setZipCode("5172CN");
         person.setCity("Kaatsheuvel");
-        person.setDogs(new ArrayList<>(List.of(domesticatedDog1, domesticatedDog2, domesticatedDog3)));
         personRepository.save(person);
-
-        domesticatedDog1.setId(1L);
-        domesticatedDog1.setName("Saar");
-        domesticatedDog1.setBreed(Breed.Dachschund);
-        domesticatedDog1.setFood("dog chow");
-        domesticatedDog1.setDogStatus(Status.breedDog);
-        domesticatedDog1.setSex(Sex.female);
-        domesticatedDog1.setBreedGroup(BreedGroup.Hound);
-        domesticatedDog1.setKindOfHair("Long haired");
-        domesticatedDog1.setWeightInGrams(1000.00);
-        domesticatedDogRepository.save(domesticatedDog1);
-
-        domesticatedDog2.setId(2L);
-        domesticatedDog2.setName("Pip");
-        domesticatedDog2.setBreed(Breed.Dachschund);
-        domesticatedDog2.setFood("dog chow");
-        domesticatedDog2.setDogStatus(Status.ownedDog);
-        domesticatedDog2.setSex(Sex.female);
-        domesticatedDog2.setBreedGroup(BreedGroup.Hound);
-        domesticatedDog2.setKindOfHair("Long haired");
-        domesticatedDogRepository.save(domesticatedDog2);
-
-        domesticatedDog3.setId(3L);
-        domesticatedDog3.setName("Lotje");
-        domesticatedDog3.setBreed(Breed.Affenpinscher);
-        domesticatedDog3.setFood("dog chow");
-        domesticatedDog3.setDogStatus(Status.availablePreOwned);
-        domesticatedDog3.setSex(Sex.female);
-        domesticatedDog3.setBreedGroup(BreedGroup.Hound);
-        domesticatedDog3.setKindOfHair("Short haired");
-        domesticatedDog3.setParentId(1L);
-        domesticatedDogRepository.save(domesticatedDog3);
-
-
-    }
-
-    @AfterEach
-    void tear(){
-
-        if(domesticatedDogRepository.count() > 0){
-            domesticatedDogRepository = null;
-        }
-
-        if(personRepository.count() > 0){
-            personRepository = null;
-        }
-
     }
 
     @Test
     void getAllDomesticatedDogs() throws Exception {
 
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
         mockMvc.perform(get("/dogs").with(jwt()))
                 .andExpect(status().isOk())
-                .andExpect(jsonPath("$[0].id").value(1))
+                .andExpect(jsonPath("$[0].id").value(domesticatedDog.getId()))
                 .andExpect(jsonPath("$[0].name").value("Saar"))
-                .andExpect(jsonPath("$[0].sex").value("female"))
-                .andExpect(jsonPath("$[1].id").value(2))
-                .andExpect(jsonPath("$[1].breedGroup").value("Hound"))
-                .andExpect(jsonPath("$[1].kindOfHair").value("Long haired"))
-                .andExpect(jsonPath("$[2].id").value(3))
-                .andExpect(jsonPath("$[2].name").value("Lotje"));
+                .andExpect(jsonPath("$[0].sex").value("female"));
     }
 
     @Test
     void getDomesticatedDogById() throws Exception {
-        mockMvc.perform(get("/dogs/id/{id}", "1").with(jwt()))
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/dogs/id/{id}", domesticatedDog.getId()).with(jwt()))
                 .andExpect(status().isOk())
-                .andExpect(jsonPath("$.id").value(1))
+                .andExpect(jsonPath("$.id").value(domesticatedDog.getId()))
                 .andExpect(jsonPath("$.name").value("Saar"))
                 .andExpect(jsonPath("$.sex").value("female"));
     }
@@ -201,8 +138,19 @@
 
     @Test
     void getDomesticatedDogByName() throws Exception {
+
+        domesticatedDog.setName("Lotje");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
         mockMvc.perform(get("/dogs/name/{name}", "Lotje").with(jwt()))
-                .andExpect(jsonPath("$[0].id").value(3))
+                .andExpect(jsonPath("$[0].id").value(domesticatedDog.getId()))
                 .andExpect(jsonPath("$[0].name").value("Lotje"))
                 .andExpect(jsonPath("$[0].sex").value("female"));
     }
@@ -217,15 +165,47 @@
 
     @Test
     void getChildrenById() throws Exception {
-        mockMvc.perform(get("/dogs/{id}/children", "1").with(jwt()))
-                .andExpect(jsonPath("$[0].id").value(3))
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        domesticatedDogPup.setName("Lotje");
+        domesticatedDogPup.setBreed(Breed.Dachschund);
+        domesticatedDogPup.setFood("dog chow");
+        domesticatedDogPup.setDogStatus(Status.breedDog);
+        domesticatedDogPup.setSex(Sex.female);
+        domesticatedDogPup.setBreedGroup(BreedGroup.Hound);
+        domesticatedDogPup.setKindOfHair("Long haired");
+        domesticatedDogPup.setParentId(domesticatedDog.getId());
+        domesticatedDogRepository.save(domesticatedDogPup);
+
+        mockMvc.perform(get("/dogs/{id}/children", domesticatedDog.getId()).with(jwt()))
+                .andExpect(jsonPath("$[0].id").value(domesticatedDogPup.getId()))
                 .andExpect(jsonPath("$[0].name").value("Lotje"))
                 .andExpect(jsonPath("$[0].sex").value("female"));
     }
 
     @Test
     void getChildrenByIdWithoutChildren() throws Exception {
-        mockMvc.perform(get("/dogs/{id}/children", "2").with(jwt()))
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/dogs/{id}/children", domesticatedDog.getId()).with(jwt()))
                 .andExpect(status().isNotFound())
                 .andExpect(content().string("This dog doesn't have children."));
     }
@@ -239,37 +219,110 @@
 
     @Test
     void getParentById() throws Exception {
-        mockMvc.perform(get("/dogs/{id}/parent", "3").with(jwt()))
-                .andExpect(jsonPath("$.id").value(1))
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        domesticatedDogPup.setName("Lotje");
+        domesticatedDogPup.setBreed(Breed.Dachschund);
+        domesticatedDogPup.setFood("dog chow");
+        domesticatedDogPup.setDogStatus(Status.availablePup);
+        domesticatedDogPup.setSex(Sex.female);
+        domesticatedDogPup.setBreedGroup(BreedGroup.Hound);
+        domesticatedDogPup.setKindOfHair("Long haired");
+        domesticatedDogPup.setParentId(domesticatedDog.getId());
+        domesticatedDogRepository.save(domesticatedDogPup);
+
+        mockMvc.perform(get("/dogs/{id}/parent", domesticatedDogPup.getId()).with(jwt()))
+                .andExpect(jsonPath("$.id").value(domesticatedDog.getId()))
                 .andExpect(jsonPath("$.name").value("Saar"))
                 .andExpect(jsonPath("$.sex").value("female"));
     }
 
     @Test
     void getParentByIdWithoutParent() throws Exception {
-        mockMvc.perform(get("/dogs/{id}/parent", "1").with(jwt()))
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(get("/dogs/{id}/parent", domesticatedDog.getId()).with(jwt()))
                 .andExpect(status().isNotFound())
                 .andExpect(content().string("No information about parent found."));
     }
 
     @Test
     void getAvailableDogs() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
+        domesticatedDogPup.setName("Lotje");
+        domesticatedDogPup.setBreed(Breed.Dachschund);
+        domesticatedDogPup.setFood("dog chow");
+        domesticatedDogPup.setDogStatus(Status.availablePup);
+        domesticatedDogPup.setSex(Sex.female);
+        domesticatedDogPup.setBreedGroup(BreedGroup.Hound);
+        domesticatedDogPup.setKindOfHair("Long haired");
+        domesticatedDogPup.setParentId(domesticatedDog.getId());
+        domesticatedDogRepository.save(domesticatedDogPup);
+
+        domesticatedDogPreOwned.setName("Pip");
+        domesticatedDogPreOwned.setBreed(Breed.Dachschund);
+        domesticatedDogPreOwned.setFood("dog chow");
+        domesticatedDogPreOwned.setDogStatus(Status.availablePreOwned);
+        domesticatedDogPreOwned.setSex(Sex.male);
+        domesticatedDogPreOwned.setBreedGroup(BreedGroup.Hound);
+        domesticatedDogPreOwned.setKindOfHair("Long haired");
+
+        domesticatedDogRepository.save(domesticatedDogPreOwned);
         mockMvc.perform(get("/dogs/available").with(jwt()))
-                .andExpect(jsonPath("$[0].id").value(3))
-                .andExpect(jsonPath("$[0].name").value("Lotje"))
-                .andExpect(jsonPath("$[0].sex").value("female"));
+                .andExpect(content().string(org.hamcrest.Matchers.containsString("Pip")))
+                .andExpect(content().string(org.hamcrest.Matchers.containsString("Lotje")));
+
     }
 
     @Test
     void getBreedDogs() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setPerson(person);
+        domesticatedDogRepository.save(domesticatedDog);
+
         mockMvc.perform(get("/dogs/breeddog").with(jwt()))
-                .andExpect(jsonPath("$[0].id").value(1))
+                .andExpect(jsonPath("$[0].id").value(domesticatedDog.getId()))
                 .andExpect(jsonPath("$[0].name").value("Saar"))
                 .andExpect(jsonPath("$[0].sex").value("female"));
     }
 
     @Test
     void createDog() throws Exception {
+
         dogInputDto.setName("Saar");
         dogInputDto.setBreed("Dachschund");
         dogInputDto.setFood("dog chow");
@@ -279,9 +332,8 @@
         dogInputDto.setKindOfHair("Long haired");
         dogInputDto.setChipNumber("111111111111111");
         dogInputDto.setHairColor("Brown");
-        dogInputDto.setPerson(person);
+        domesticatedDog.setPerson(person);
         dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
-        dogInputDto.setParentId(2L);
 
         mockMvc.perform(post("/dogs").with(jwt())
                 .contentType(MediaType.APPLICATION_JSON)
@@ -291,6 +343,7 @@
 
     @Test
     void createDogWithoutDogObject() throws Exception {
+
         mockMvc.perform(post("/dogs").with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDto)))
@@ -300,12 +353,14 @@
 
     @Test
     void createDogMissingHairColor() throws Exception {
+
         dogInputDtoMissingValues.setName("Saar");
         dogInputDtoMissingValues.setBreed("Dachschund");
         dogInputDtoMissingValues.setFood("dog chow");
         dogInputDtoMissingValues.setDogStatus("breedDog");
         dogInputDtoMissingValues.setSex("female");
         dogInputDtoMissingValues.setBreedGroup("Hound");
+        dogInputDtoMissingValues.setPerson(person);
 
         mockMvc.perform(post("/dogs").with(jwt())
                 .contentType(MediaType.APPLICATION_JSON)
@@ -316,6 +371,7 @@
 
     @Test
     void createDogUnknownParent() throws Exception {
+
         dogInputDto.setName("Saar");
         dogInputDto.setBreed("Dachschund");
         dogInputDto.setFood("dog chow");
@@ -325,6 +381,8 @@
         dogInputDto.setKindOfHair("Long haired");
         dogInputDto.setChipNumber("111111111111111");
         dogInputDto.setHairColor("Brown");
+        domesticatedDog.setPerson(person);
+
         dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
         dogInputDto.setParentId(222L);
 
@@ -337,6 +395,7 @@
 
     @Test
     void createDogMissingDOB() throws Exception {
+
         dogInputDtoMissingValues.setName("Saar");
         dogInputDtoMissingValues.setBreed("Dachschund");
         dogInputDtoMissingValues.setFood("dog chow");
@@ -353,6 +412,7 @@
 
     @Test
     void createDogMissingHairKind() throws Exception {
+
         dogInputDtoMissingValues.setName("Saar");
         dogInputDtoMissingValues.setBreed("Dachschund");
         dogInputDtoMissingValues.setFood("dog chow");
@@ -369,6 +429,7 @@
 
     @Test
     void createDogMissingChipNumber() throws Exception {
+
         dogInputDtoMissingValues.setName("Saar");
         dogInputDtoMissingValues.setBreed("Dachschund");
         dogInputDtoMissingValues.setFood("dog chow");
@@ -385,6 +446,7 @@
 
     @Test
     void createDogInvalidPersonId() throws Exception {
+
         personNotInRepo.setId(5L);
         dogInputDtoUnknownPerson.setName("Saar");
         dogInputDtoUnknownPerson.setBreed("Dachschund");
@@ -408,6 +470,7 @@
 
     @Test
     void createDogMissingPersonId() throws Exception {
+
         dogInputDtoUnknownPerson.setName("Saar");
         dogInputDtoUnknownPerson.setBreed("Dachschund");
         dogInputDtoUnknownPerson.setFood("dog chow");
@@ -430,6 +493,7 @@
 
     @Test
     void createDogInvalidSex() throws Exception {
+
         dogInputDtoUnknownSex.setName("Saar");
         dogInputDtoUnknownSex.setBreed("Dachschund");
         dogInputDtoUnknownSex.setFood("dog chow");
@@ -450,11 +514,20 @@
 
     @Test
     void createLitter() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
         dogInputDto.setName("Lotje");
         dogInputDto.setBreed("Dachschund");
         dogInputDto.setFood("dog chow");
         dogInputDto.setDogStatus("breedDog");
-        dogInputDto.setPerson(person);
         dogInputDto.setSex("female");
         dogInputDto.setBreedGroup("Hound");
         dogInputDto.setKindOfHair("Long haired");
@@ -465,7 +538,7 @@
         domesticatedDogInputDtoList = new ArrayList<>();
         domesticatedDogInputDtoList.add(dogInputDto);
 
-        mockMvc.perform(post("/dogs/{id}/children", 1).with(jwt())
+        mockMvc.perform(post("/dogs/{id}/children", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(arrayAsJsonString(domesticatedDogInputDtoList)))
                 .andExpect(status().isOk());
@@ -473,7 +546,17 @@
 
     @Test
     void createLitterWithNonListInput() throws Exception {
-        mockMvc.perform(post("/dogs/{id}/children", 1).with(jwt())
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(post("/dogs/{id}/children", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDto)))
                 .andExpect(status().isBadRequest());
@@ -481,9 +564,19 @@
 
     @Test
     void createLitterWithEmptyListInput() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
         List<DomesticatedDogInputDto> dogs = new ArrayList<>();
 
-        mockMvc.perform(post("/dogs/{id}/children", 1).with(jwt())
+        mockMvc.perform(post("/dogs/{id}/children", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(arrayAsJsonString(dogs)))
                 .andExpect(content().string("Empty array. No dogs are created"));
@@ -492,16 +585,40 @@
 
     @Test
     void uploadImageWithoutImage() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
         byte[] imageBytes = {1, 2, 3};
-        MockMultipartFile image = new MockMultipartFile("file", "filename.txt", "text/plain", imageBytes);
+        MockMultipartFile image = new MockMultipartFile(
+                "file",
+                "filename.txt",
+                "text/plain",
+                imageBytes);
 
-        mockMvc.perform(MockMvcRequestBuilders.multipart("/dogs/{id}/image", 1)
+        mockMvc.perform(MockMvcRequestBuilders.multipart("/dogs/{id}/image", domesticatedDog.getId())
                 .file(image).with(jwt()))
                 .andExpect(status().isBadRequest());
    }
 
     @Test
     void updateDog() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
         dogInputDto.setName("Saar");
         dogInputDto.setBreed("Dachschund");
         dogInputDto.setFood("dog chow");
@@ -514,7 +631,7 @@
         dogInputDto.setHairColor("Brown");
         dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
 
-        mockMvc.perform(put("/dogs/{id}", "3").with(jwt())
+        mockMvc.perform(put("/dogs/{id}", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDto)))
                 .andExpect(status().isOk());
@@ -522,6 +639,7 @@
 
     @Test
     void updateDogWithUnknownId() throws Exception {
+
         dogInputDto.setName("Saar");
         dogInputDto.setBreed("Dachschund");
         dogInputDto.setFood("dog chow");
@@ -542,6 +660,15 @@
 
     @Test
     void updateDogWithUnknownPerson() throws Exception {
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
         personNotInRepo.setId(5L);
 
         dogInputDtoUnknownPerson.setName("Saar");
@@ -556,7 +683,7 @@
         dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
         dogInputDtoUnknownPerson.setPerson(personNotInRepo);
 
-        mockMvc.perform(put("/dogs/{id}", "3").with(jwt())
+        mockMvc.perform(put("/dogs/{id}", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDtoUnknownPerson)))
                 .andExpect(status().isNotFound())
@@ -565,7 +692,28 @@
 
     @Test
     void patchDog() throws Exception {
-        mockMvc.perform(patch("/dogs/{id}", "3").with(jwt())
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
+        dogInputDto.setName("Saar");
+        dogInputDto.setBreed("Dachschund");
+        dogInputDto.setFood("dog chow");
+        dogInputDto.setDogStatus("breedDog");
+        dogInputDto.setPerson(person);
+        dogInputDto.setSex("female");
+        dogInputDto.setBreedGroup("Hound");
+        dogInputDto.setKindOfHair("Long haired");
+        dogInputDto.setChipNumber("111111111111111");
+        dogInputDto.setHairColor("Brown");
+        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
+
+        mockMvc.perform(patch("/dogs/{id}", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDto)))
                 .andExpect(status().isOk());
@@ -573,6 +721,19 @@
 
     @Test
     void patchDogWithUnknownId() throws Exception {
+
+        dogInputDto.setName("Saar");
+        dogInputDto.setBreed("Dachschund");
+        dogInputDto.setFood("dog chow");
+        dogInputDto.setDogStatus("breedDog");
+        dogInputDto.setPerson(person);
+        dogInputDto.setSex("female");
+        dogInputDto.setBreedGroup("Hound");
+        dogInputDto.setKindOfHair("Long haired");
+        dogInputDto.setChipNumber("111111111111111");
+        dogInputDto.setHairColor("Brown");
+        dogInputDto.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
+
         mockMvc.perform(patch("/dogs/{id}", "666").with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDto)))
@@ -582,9 +743,19 @@
     @Test
     void patchDogWithLostWeight() throws Exception {
 
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDog.setWeightInGrams(1000.99);
+        domesticatedDogRepository.save(domesticatedDog);
+
         dogInputDtoLostWeight.setWeightInGrams(10.00);
 
-        mockMvc.perform(patch("/dogs/{id}", "1").with(jwt())
+        mockMvc.perform(patch("/dogs/{id}", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDtoLostWeight)))
                 .andExpect(status().isOk())
@@ -594,6 +765,15 @@
     @Test
     void patchDogWithUnknownPerson() throws Exception {
 
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
         personNotInRepo.setId(5L);
 
         dogInputDtoUnknownPerson.setName("Saar");
@@ -608,7 +788,7 @@
         dogInputDtoUnknownPerson.setDateOfBirth(LocalDate.of(2022, Month.JANUARY, 22));
         dogInputDtoUnknownPerson.setPerson(personNotInRepo);
 
-        mockMvc.perform(patch("/dogs/{id}", "1").with(jwt())
+        mockMvc.perform(patch("/dogs/{id}", domesticatedDog.getId()).with(jwt())
                         .contentType(MediaType.APPLICATION_JSON)
                         .content(asJsonString(dogInputDtoUnknownPerson)))
                 .andExpect(status().isNotFound())
@@ -618,7 +798,17 @@
 
     @Test
     void deleteDogImageWithoutImage() throws Exception {
-        mockMvc.perform(delete("/dogs/{id}/image", "1").with(jwt()))
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
+
+        mockMvc.perform(delete("/dogs/{id}/image", domesticatedDog.getId()).with(jwt()))
                 .andExpect(status().isNotFound())
                 .andExpect(content().string("This dog does not have a picture."));
     }
@@ -639,32 +829,31 @@
 
     @Test
     void deleteDog() throws Exception {
-        DomesticatedDog domesticatedDogToDelete = new DomesticatedDog();
-        domesticatedDogToDelete.setId(4L);
-        domesticatedDogToDelete.setName("Pupje");
-        domesticatedDogToDelete.setBreed(Breed.Affenpinscher);
-        domesticatedDogToDelete.setFood("milk");
-        domesticatedDogToDelete.setDogStatus(Status.soldPup);
-        domesticatedDogToDelete.setSex(Sex.female);
-        domesticatedDogToDelete.setBreedGroup(BreedGroup.Hound);
-        domesticatedDogToDelete.setKindOfHair("Short haired");
-        domesticatedDogRepository.save(domesticatedDogToDelete);
+
+        domesticatedDog.setName("Saar");
+        domesticatedDog.setBreed(Breed.Dachschund);
+        domesticatedDog.setFood("dog chow");
+        domesticatedDog.setDogStatus(Status.breedDog);
+        domesticatedDog.setSex(Sex.female);
+        domesticatedDog.setBreedGroup(BreedGroup.Hound);
+        domesticatedDog.setKindOfHair("Long haired");
+        domesticatedDogRepository.save(domesticatedDog);
 
         medicalData = new MedicalData();
         medicalData.setId(1L);
         medicalData.setDiagnose("Sick");
         medicalData.setDateOfMedicalTreatment(LocalDate.of(2023, Month.JANUARY, 22));
-        medicalData.setDomesticatedDog(domesticatedDogToDelete);
+        medicalData.setDomesticatedDog(domesticatedDog);
         medicalDataRepository.save(medicalData);
 
         veterinarianAppointment = new VeterinarianAppointment();
         veterinarianAppointment.setId(1L);
         veterinarianAppointment.setSubject("Check up");
         veterinarianAppointment.setAppointmentDate(LocalDate.of(2023, Month.JANUARY, 22));
-        veterinarianAppointment.setDomesticatedDog(domesticatedDogToDelete);
+        veterinarianAppointment.setDomesticatedDog(domesticatedDog);
         veterinarianAppointmentRepository.save(veterinarianAppointment);
 
-        mockMvc.perform(delete("/dogs/{id}", domesticatedDogToDelete.getId()).with(jwt()))
+        mockMvc.perform(delete("/dogs/{id}", domesticatedDog.getId()).with(jwt()))
                 .andExpect(status().isNoContent());
     }
 
Index: breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DbService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DbService.java b/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DbService.java
new file mode 100644
--- /dev/null	(date 1674673713082)
+++ b/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DbService.java	(date 1674673713082)
@@ -0,0 +1,87 @@
+package nl.novi.breedsoft.cleanupH2DatabaseTestListener;
+import jakarta.transaction.Transactional;
+import lombok.RequiredArgsConstructor;
+import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+import javax.sql.DataSource;
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.util.HashSet;
+import java.util.Set;
+
+@Component
+@Slf4j
+@RequiredArgsConstructor
+public class CleanupH2DbService {
+    public static final String H2_DB_PRODUCT_NAME = "H2";
+    private final DataSource dataSource;
+
+    @SneakyThrows
+    @Transactional(Transactional.TxType.REQUIRES_NEW)
+    public void cleanup(String schemaName) {
+        try (Connection connection = dataSource.getConnection();
+             Statement statement = connection.createStatement()) {
+            if (isH2Database(connection)) {
+                disableConstraints(statement);
+                truncateTables(statement, schemaName);
+                resetSequences(statement, schemaName);
+                enableConstraints(statement);
+            } else {
+                log.warn("Skipping cleaning up database, because it's not H2 database");
+            }
+        }
+    }
+
+    private void resetSequences(Statement statement, String schemaName) {
+        getSchemaSequences(statement, schemaName).forEach(sequenceName ->
+                executeStatement(statement, String.format("ALTER SEQUENCE %s RESTART WITH 1", sequenceName)));
+    }
+
+    private void truncateTables(Statement statement, String schemaName) {
+        getSchemaTables(statement, schemaName)
+                .forEach(tableName -> executeStatement(statement, "TRUNCATE TABLE " + tableName));
+    }
+
+    private void enableConstraints(Statement statement) {
+        executeStatement(statement, "SET REFERENTIAL_INTEGRITY TRUE");
+    }
+
+    private void disableConstraints(Statement statement) {
+        executeStatement(statement, "SET REFERENTIAL_INTEGRITY FALSE");
+    }
+
+    @SneakyThrows
+    private boolean isH2Database(Connection connection) {
+        return H2_DB_PRODUCT_NAME.equals(connection.getMetaData().getDatabaseProductName());
+    }
+
+    @SneakyThrows
+    private void executeStatement(Statement statement, String sql) {
+        statement.executeUpdate(sql);
+    }
+
+    @SneakyThrows
+    private Set<String> getSchemaTables(Statement statement, String schemaName) {
+        String sql = String.format("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES  where TABLE_SCHEMA='%s'", schemaName);
+        return queryForList(statement, sql);
+    }
+
+    @SneakyThrows
+    private Set<String> getSchemaSequences(Statement statement, String schemaName) {
+        String sql = String.format("SELECT SEQUENCE_NAME FROM INFORMATION_SCHEMA.SEQUENCES WHERE SEQUENCE_SCHEMA='%s'", schemaName);
+        return queryForList(statement, sql);
+    }
+
+    @SneakyThrows
+    private Set<String> queryForList(Statement statement, String sql) {
+        Set<String> tables = new HashSet<>();
+        try (ResultSet rs = statement.executeQuery(sql)) {
+            while (rs.next()) {
+                tables.add(rs.getString(1));
+            }
+        }
+        return tables;
+    }
+}
Index: breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DatabaseTestListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DatabaseTestListener.java b/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DatabaseTestListener.java
new file mode 100644
--- /dev/null	(date 1674673656647)
+++ b/breedsoft/src/test/java/nl/novi/breedsoft/cleanupH2DatabaseTestListener/CleanupH2DatabaseTestListener.java	(date 1674673656647)
@@ -0,0 +1,30 @@
+package nl.novi.breedsoft.cleanupH2DatabaseTestListener;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.core.Ordered;
+import org.springframework.test.context.TestContext;
+import org.springframework.test.context.TestExecutionListener;
+
+@Slf4j
+public class CleanupH2DatabaseTestListener implements TestExecutionListener, Ordered {
+
+    private static final String H2_SCHEMA_NAME = "PUBLIC";
+
+    @Override
+    public void beforeTestMethod(TestContext testContext) throws Exception {
+        TestExecutionListener.super.beforeTestMethod(testContext);
+        cleanupDatabase(testContext);
+    }
+
+    private void cleanupDatabase(TestContext testContext) {
+        log.info("Cleaning up database begin");
+        CleanupH2DbService cleanupH2DbService = testContext.getApplicationContext().getBean(CleanupH2DbService.class);
+        cleanupH2DbService.cleanup(H2_SCHEMA_NAME);
+        log.info("Cleaning up database end");
+    }
+
+    @Override
+    public int getOrder() {
+        return 0;
+    }
+}
